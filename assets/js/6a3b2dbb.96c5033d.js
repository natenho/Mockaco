"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8173],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),g=a,d=u["".concat(i,".").concat(g)]||u[g]||m[g]||o;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=g;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(8168),a=(t(6540),t(5680));const o={},l="Mocking XML responses",s={unversionedId:"guides/mocking-xml",id:"guides/mocking-xml",title:"Mocking XML responses",description:"Mockaco is able to parse XML request and make its elements available to be used in the response and/or callback templates.",source:"@site/docs/guides/mocking-xml.md",sourceDirName:"guides",slug:"/guides/mocking-xml",permalink:"/Mockaco/docs/guides/mocking-xml",draft:!1,editUrl:"https://github.com/natenho/Mockaco/tree/master/website/docs/guides/mocking-xml.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stateful mocks",permalink:"/Mockaco/docs/guides/mocking-stateful"},next:{title:"Chaos Engineering",permalink:"/Mockaco/docs/chaos/"}},i={},c=[{value:"Example",id:"example",level:2},{value:"Create the request/response template",id:"create-the-requestresponse-template",level:2},{value:"Send the request and get the mocked response",id:"send-the-request-and-get-the-mocked-response",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"mocking-xml-responses"},"Mocking XML responses"),(0,a.yg)("p",null,"Mockaco is able to parse XML request and make its elements available to be used in the response and/or callback templates."),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)("p",null,"This example is composed by a XML request which is transformed and returned with a different schema."),(0,a.yg)("p",null,"Given the XML request payload:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8" ?>\n<root>\n    <theSongName>Glycerine</theSongName>\n    <theAlbum year="1994">Sixteen Stone</theAlbum>\n</root>\n')),(0,a.yg)("h2",{id:"create-the-requestresponse-template"},"Create the request/response template"),(0,a.yg)("p",null,"Create a file named ",(0,a.yg)("inlineCode",{parentName:"p"},"songs.json")," under ",(0,a.yg)("inlineCode",{parentName:"p"},"Mocks")," folder:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n  "request": {\n    "method": "POST",\n    "route": "songs"\n  },\n  "response": {\n    "status": "OK",\n    "headers": {\n      "Content-Type": "application/xml"\n    },\n    "body": "\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\n<song>\n  <name><#=Request.Body["root"]?["theSongName"]#></name>\n  <album>\n    <name><#=Request.Body["root"]?["theAlbum"]?["#text"]#></name>\n    <year><#=Request.Body["root"]?["theAlbum"]?["@year"]#></year>\n  </album>\n</song>\n"\n  }\n}\n')),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Content-Type")," header must be set to ",(0,a.yg)("inlineCode",{parentName:"p"},"application/xml")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"text/xml"),".\nNotice that XML double quotes must be properly escaped, but inline C# scripts should not be escaped."),(0,a.yg)("p",null,"To access the request XML data and use it inside the response:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"An element ",(0,a.yg)("strong",{parentName:"li"},"without")," attributes can be directly accessed by its name:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'Request.Body["root"]?["theSongName"]\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"An element ",(0,a.yg)("strong",{parentName:"li"},"with")," one or more attributes can be accessed using ",(0,a.yg)("inlineCode",{parentName:"li"},"#text")," key:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'Request.Body["root"]?["theAlbum"]?["#text"]\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"An element attribute can be accessed using ",(0,a.yg)("inlineCode",{parentName:"li"},"@")," prefix:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'Request.Body["root"]?["theAlbum"]?["@year"]\n')),(0,a.yg)("h2",{id:"send-the-request-and-get-the-mocked-response"},"Send the request and get the mocked response"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},'curl -iX POST \\\n  --url http://localhost:5000/songs \\\n  --header \'Content-Type: application/xml\' \\\n  --data $\'<?xml version="1.0" encoding="UTF-8" ?>\\r\\n<root>\\r\\n    <theSongName>Glycerine</theSongName>\\r\\n    <theAlbum year="1994">Sixteen Stone</theAlbum>\\r\\n</root>\'\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 200 OK\nDate: Tue, 13 Aug 2019 05:09:40 GMT\nContent-Type: application/xml\nServer: Kestrel\nTransfer-Encoding: chunked\n\n<?xml version="1.0" encoding="UTF-8"?>\n<song>\n  <name>Glycerine</name>\n  <album>\n    <name>Sixteen Stone</name>\n    <year>1994</year>\n  </album>\n</song>\n')))}m.isMDXComponent=!0}}]);