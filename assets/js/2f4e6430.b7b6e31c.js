"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4565],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,y=u["".concat(l,".").concat(m)]||u[m]||g[m]||o;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8761:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(8168),a=(t(6540),t(5680));const o={},i="Faker",s={unversionedId:"reference-scripting/faker",id:"reference-scripting/faker",title:"Faker",description:"Basic usage",source:"@site/docs/reference-scripting/faker.md",sourceDirName:"reference-scripting",slug:"/reference-scripting/faker",permalink:"/Mockaco/docs/reference-scripting/faker",draft:!1,editUrl:"https://github.com/natenho/Mockaco/tree/master/website/docs/reference-scripting/faker.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scripting",permalink:"/Mockaco/docs/reference-scripting/"},next:{title:"Global",permalink:"/Mockaco/docs/reference-scripting/global"}},l={},c=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Generating a list of items",id:"generating-a-list-of-items",level:2},{value:"Localization",id:"localization",level:2},{value:"Using Bogus extensions",id:"using-bogus-extensions",level:2}],p={toc:c},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"faker"},"Faker"),(0,a.yg)("h2",{id:"basic-usage"},"Basic usage"),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"Faker")," facade object is available to generate fake data within a script."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n  "request": {\n    "method": "GET"\n  },\n  "response": {\n    "status": "OK",\n    "headers": {\n      "Content-Type": "application/json"\n    },\n    "body": {\n      "name": "<#= Faker.Name.FullName() #>",\n      "company": "<#= Faker.Company.CompanyName() #>",\n      "city": "<#= Faker.Address.City() #>"\n    }\n  }\n}\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'$ curl http://localhost:5000\n{\n  "name": "Mollie Beahan",\n  "company": "Ziemann, Anderson and Durgan",\n  "city": "Ritchiemouth"\n}\n')),(0,a.yg)("h2",{id:"generating-a-list-of-items"},"Generating a list of items"),(0,a.yg)("p",null,"This example creates a list of 10 items:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n    "request": {\n        "method": "GET",\n        "route": "/names"\n    },\n    "response": {\n        "body": <#=\nclass Person\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n}\n\nvar count =  10;\nvar people = new Person[count];\n\nfor(var i = 0; i < count; i++ ) {\n    people[i] = new Person { ID = i + 1, Name = new Faker().Person.FullName };\n}\n\nreturn JsonConvert.SerializeObject(people);\n#>\n    }\n}\n')),(0,a.yg)("h2",{id:"localization"},"Localization"),(0,a.yg)("p",null,"To generate localized data, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"Accept-Language")," HTTP header when sending a request to Mockaco. Defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"en")," (english) fake data."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n  "request": {\n    "method": "GET"\n  },\n  "response": {\n    "status": "OK",\n    "headers": {\n      "Content-Type": "application/json"\n    },\n    "body": {\n      "name": "<#= Faker.FullName() #>",\n      "company": "<#= Faker.Company.CompanyName() #>",\n      "city": "<#= Faker.Address.City() #>"\n    }\n  }\n}\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'$ curl -X GET "http://localhost:5000" -H "Accept-Language: ru"\n{\n  "name": "\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u041c\u0435\u043b\u044c\u043d\u0438\u043a\u043e\u0432\u0430",\n  "company": "\u0413\u0443\u0441\u0435\u0432 - \u041d\u0438\u043a\u043e\u043d\u043e\u0432",\n  "city": "\u0422\u0443\u043b\u0430"\n}\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'$ curl -X GET "http://localhost:5000" -H "Accept-Language: pt-BR"\n{\n  "name": "Mait\xea Albuquerque",\n  "company": "Costa S.A.",\n  "city": "Santo Andr\xe9"\n}\n')),(0,a.yg)("h2",{id:"using-bogus-extensions"},"Using Bogus extensions"),(0,a.yg)("p",null,"To use ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/bchavez/Bogus?tab=readme-ov-file#api-extension-methods"},"Bogus API Extension Methods"),", consider the following example, using the ",(0,a.yg)("inlineCode",{parentName:"p"},"Bogus.Extensions.Brazil")," namespace to generate brazilian CPF numbers:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n  "request": {\n    "method": "GET"\n  },\n  "response": {\n    "status": "OK",\n    "body": <#= Faker.Person.Cpf() #>\n  }\n}\n')),(0,a.yg)("p",null,"Use the ",(0,a.yg)("a",{parentName:"p",href:"/docs/configuration/#imports"},"Imports option")," to import the Bogus extension methods on Mockaco startup:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'$ mockaco --urls=http://+:5000 --Mockaco:Imports:0="Bogus.Extensions.Brazil"\n')),(0,a.yg)("p",null,"Then call the mock endpoint:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},'$ curl -i "http://localhost:5000"\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sun, 10 Mar 2024 23:44:50 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n"422.244.459-62"\n')))}g.isMDXComponent=!0}}]);