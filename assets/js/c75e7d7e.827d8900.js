"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[253],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,m=p["".concat(l,".").concat(d)]||p[d]||y[d]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4893:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(8168),o=(t(6540),t(5680));const a={},i="Request",s={unversionedId:"reference-scripting/request",id:"reference-scripting/request",title:"Request",description:"The Request object has the following properties:",source:"@site/docs/reference-scripting/request.md",sourceDirName:"reference-scripting",slug:"/reference-scripting/request",permalink:"/Mockaco/docs/reference-scripting/request",draft:!1,editUrl:"https://github.com/natenho/Mockaco/tree/master/website/docs/reference-scripting/request.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Global",permalink:"/Mockaco/docs/reference-scripting/global"},next:{title:"Response",permalink:"/Mockaco/docs/reference-scripting/response"}},l={},c=[{value:"Url",id:"url",level:2},{value:"Route",id:"route",level:2},{value:"Header",id:"header",level:2},{value:"Query",id:"query",level:2},{value:"Body",id:"body",level:2},{value:"Querying the body as a dictionary",id:"querying-the-body-as-a-dictionary",level:3},{value:"Querying the body using JSONPath",id:"querying-the-body-using-jsonpath",level:3}],u={toc:c},p="wrapper";function y(e){let{components:n,...t}=e;return(0,o.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"request"},"Request"),(0,o.yg)("p",null,"The Request object has the following properties:"),(0,o.yg)("h2",{id:"url"},"Url"),(0,o.yg)("p",null,"An instance of ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/dotnet/api/system.uri"},(0,o.yg)("inlineCode",{parentName:"a"},"Uri"))," class containing request URL data."),(0,o.yg)("h2",{id:"route"},"Route"),(0,o.yg)("p",null,"A ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},(0,o.yg)("inlineCode",{parentName:"a"},"IReadOnlyDictionary<string, string>"))," containing route parameters. Missing keys will return an empty string. To check the existence of a key, use the ",(0,o.yg)("inlineCode",{parentName:"p"},"ContainsKey")," method."),(0,o.yg)("h2",{id:"header"},"Header"),(0,o.yg)("p",null,"A ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},(0,o.yg)("inlineCode",{parentName:"a"},"IReadOnlyDictionary<string, string>"))," containing request headers. Missing keys will return an empty string. To check the existence of a key, use the ",(0,o.yg)("inlineCode",{parentName:"p"},"ContainsKey")," method."),(0,o.yg)("h2",{id:"query"},"Query"),(0,o.yg)("p",null,"A ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlydictionary-2"},(0,o.yg)("inlineCode",{parentName:"a"},"IReadOnlyDictionary<string, string>"))," containing query parameters. Missing keys will return an empty string. To check the existence of a key, use the ",(0,o.yg)("inlineCode",{parentName:"p"},"ContainsKey")," method."),(0,o.yg)("h2",{id:"body"},"Body"),(0,o.yg)("p",null,"A ",(0,o.yg)("a",{parentName:"p",href:"https://www.newtonsoft.com/json/help/html/t_newtonsoft_json_linq_jtoken.htm"},(0,o.yg)("inlineCode",{parentName:"a"},"JToken"))," object containing request body data. The content of the request body is parsed as JSON and returned as a ",(0,o.yg)("inlineCode",{parentName:"p"},"JToken")," object. The content types that Mockaco can parse are ",(0,o.yg)("inlineCode",{parentName:"p"},"application/json"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"application/xml"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"text/xml"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"text/plain"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"multipart/form-data"),"."),(0,o.yg)("h3",{id:"querying-the-body-as-a-dictionary"},"Querying the body as a dictionary"),(0,o.yg)("p",null,"The body can be queried like a dictionary of dictionaries. A simple ",(0,o.yg)("inlineCode",{parentName:"p"},'Request.Body["key"]?["subKey"]')," will return the value of the required ",(0,o.yg)("inlineCode",{parentName:"p"},"subKey"),". In the same way, ",(0,o.yg)("inlineCode",{parentName:"p"},"Request.Body[0]")," would return the first item"),(0,o.yg)("p",null,"If the key is not found, it will return ",(0,o.yg)("inlineCode",{parentName:"p"},"null"),", so it is a good practice to use the ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/member-access-operators#null-conditional-operators--and-"},"null conditional operator ",(0,o.yg)("inlineCode",{parentName:"a"},"?")),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'{\n  "request": {\n    "method": "GET",\n    "route": "songs/{id}"\n  },\n  "response": {\n    "status": "OK",\n    "headers": {\n      "Content-Type": "application/json"\n    },\n    "body": {\n        "id": "<#=Request.Route["id"] #>",\n        "name": "<#=Request.Body["songs"]?[0]?["name"] #>",\n        "album": {\n            "name": "<#=Request.Body["songs"]?[0]?["album"]?["name"] #>",\n            "year": "<#=Request.Body["songs"]?[0]?["album"]?["year"] #>"\n        }\n    }\n  }\n}\n')),(0,o.yg)("h3",{id:"querying-the-body-using-jsonpath"},"Querying the body using JSONPath"),(0,o.yg)("p",null,"You can also use the ",(0,o.yg)("a",{parentName:"p",href:"https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Linq_JToken_SelectToken.htm"},(0,o.yg)("inlineCode",{parentName:"a"},"SelectToken"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Linq_JToken_SelectTokens.htm"},(0,o.yg)("inlineCode",{parentName:"a"},"SelectTokens"))," methods to query the body using JSONPath, which is a convenient way to traverse and filter fields from a complex object. These methods returns one or more ",(0,o.yg)("inlineCode",{parentName:"p"},"JToken")," objects containing the selected tokens. If the token is not found, it returns ",(0,o.yg)("inlineCode",{parentName:"p"},"null"),"."),(0,o.yg)("p",null,"Given the following mock template:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'{\n  "request": {\n    "method": "POST",\n    "route": "/json_path"\n  },\n  "response": {\n    "body": {\n      "Manufacturer": "<#= Request.Body.SelectToken("Manufacturers[0].Name") #>",\n      "Price": "<#= Request.Body.SelectToken("Manufacturers[0].Products[0].Price") #>",\n      "ProductName": "<#= Request.Body.SelectToken("Manufacturers[1].Products[0].Name") #>",\n      "AcmeManufacturer": <#= Request.Body.SelectToken("$.Manufacturers[?(@.Name == \'Acme Co\')]") #>,\n      "FilteredProducts": <#= JsonConvert.SerializeObject(Request.Body.SelectTokens("$..Products[?(@.Price >= 50)].Name")) #>\n    }\n  }\n}\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},'$ curl -X POST \'http://localhost:5000/json_path\' \\\n-H \'Content-Type: application/json\' \\\n-d \'\n{\n  "Stores": [\n    "Lambton Quay",\n    "Willis Street"\n  ],\n  "Manufacturers": [\n    {\n      "Name": "Acme Co",\n      "Products": [\n        {\n          "Name": "Anvil",\n          "Price": 50\n        }\n      ]\n    },\n    {\n      "Name": "Contoso",\n      "Products": [\n        {\n          "Name": "Elbow Grease",\n          "Price": 99.95\n        },\n        {\n          "Name": "Headlight Fluid",\n          "Price": 4\n        }\n      ]\n    }\n  ]\n}\'\n\n{\n  "Manufacturer": "Acme Co",\n  "Price": "50",\n  "ProductName": "Elbow Grease",\n  "AcmeManufacturer": {\n    "Name": "Acme Co",\n    "Products": [\n      {\n        "Name": "Anvil",\n        "Price": 50\n      }\n    ]\n  },\n  "FilteredProducts": [\n    "Anvil",\n    "Elbow Grease"\n  ]\n}\n')),(0,o.yg)("p",null,"See also:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.newtonsoft.com/json/help/html/SelectToken.htms"},"Querying JSON with SelectToken")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.newtonsoft.com/json/help/html/QueryingLINQtoJSON.htm"},"Querying JSON with LINQ"))))}y.isMDXComponent=!0}}]);