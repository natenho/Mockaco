"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5554],{5680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>m});var n=t(6540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),y=o,m=p["".concat(i,".").concat(y)]||p[y]||d[y]||a;return t?n.createElement(m,c(c({ref:r},u),{},{components:t})):n.createElement(m,c({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=y;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[p]="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5716:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=t(8168),o=(t(6540),t(5680));const a={sidebar_position:1},c="Install and run",l={unversionedId:"quick-start/install-run",id:"quick-start/install-run",title:"Install and run",description:"Choose your favorite way to install Mockaco locally or in your server.",source:"@site/docs/quick-start/install-run.md",sourceDirName:"quick-start",slug:"/quick-start/install-run",permalink:"/Mockaco/docs/quick-start/install-run",draft:!1,editUrl:"https://github.com/natenho/Mockaco/tree/master/website/docs/quick-start/install-run.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/Mockaco/docs/category/quick-start"},next:{title:"Create a mock",permalink:"/Mockaco/docs/quick-start/create-mock"}},i={},s=[{value:".NET CLI",id:"net-cli",level:2},{value:"Docker",id:"docker",level:2},{value:"From sources",id:"from-sources",level:2}],u={toc:s},p="wrapper";function d(e){let{components:r,...t}=e;return(0,o.yg)(p,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"install-and-run"},"Install and run"),(0,o.yg)("p",null,"Choose your favorite way to install Mockaco locally or in your server."),(0,o.yg)("h2",{id:"net-cli"},".NET CLI"),(0,o.yg)("p",null,"Install and run as a dotnet tool:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'$ dotnet tool install -g mockaco\n$ mockaco --urls "http://localhost:5000"\n')),(0,o.yg)("p",null,"A random local port is chosen if ",(0,o.yg)("inlineCode",{parentName:"p"},"--urls")," parameter is not provided."),(0,o.yg)("h2",{id:"docker"},"Docker"),(0,o.yg)("p",null,"You can run Mockaco from the official ",(0,o.yg)("a",{parentName:"p",href:"https://hub.docker.com/r/natenho/mockaco"},"Docker image")," (replace ",(0,o.yg)("inlineCode",{parentName:"p"},"/your/folder")," with an existing directory of your preference):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ docker run -it --rm -p 5000:5000 -v /your/folder:/app/Mocks natenho/mockaco\n")),(0,o.yg)("p",null,"The port exposed by the container is 5000 (HTTP) by default."),(0,o.yg)("h2",{id:"from-sources"},"From sources"),(0,o.yg)("p",null,"Or your can run it directly from sources:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ git clone https://github.com/natenho/Mockaco.git\n$ cd Mockaco\\src\\Mockaco\n$ dotnet run\n")),(0,o.yg)("p",null,"A random local port is chosen if ",(0,o.yg)("inlineCode",{parentName:"p"},"--urls")," parameter is not provided."))}d.isMDXComponent=!0}}]);